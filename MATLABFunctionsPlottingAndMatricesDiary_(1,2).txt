MATLAB - Functions, Plotting, and Matrices - Andrew Fastenau

#################
Examples
#################

a = 5; x = 2; y = 8;
y = exp(-a)*sin(x)+10*sqrt(y)

y =

   28.2904

#

log(142)

ans =

    4.9558

#

log10(142

ans =
	
	2.1523
	
#

sin(pi/4)

ans = 
	
	0.7071
	
#

exp(10)

ans = 

	2.2026e+004
	
#

x = [1 2 3 4 5 6]
y = [3 -1 2 4 5 1]
plot(x,y)

x =

     1     2     3     4     5     6


y =

     3    -1     2     4     5     1

# 

x = 0:1/100:2*pi;
y = sin(x);
plot(x,y)

" The output is the ever legendary sine wave. "

#

x = 0:pi/100:2*pi;
y1 = 2*cos(x);
y2 = cos(x);
y3 = 0.5*cos(x);
plot(x,y1,'--',x,y2,'-',x,y3,':')
xlabel('0 \leq x \leq 2\pi')
ylabel('Cosine functions')
legend('2*cos(x)','cos(x)','0.5*cos(x)')
title('Typical example of multiple plots')
axis([0 2*pi -3 3]}

" The output is a trifold of droopy cosine graphs. "

#

v = [1 4 7 10 13]

v =

     1     4   7 10    13

#

w = [1;4;7;10;13]

w =

     1
     4
     7
    10
    13

# 

A = [1 2 3; 4 5 6; 7 8 9]

A =

     1     2     3
     4     5     6
     7     8     9

#

A =([1 2 3; 4 5 6; 7 8 9])
B = A([2 3],[1 2])

B =

     4     5
     7     8

#

A =([1 2 3; 4 5 6; 7 8 9])
C = A([2 1 3],:)

C =

     4     5     6
     1     2     3
     7     8     9

#

A =([1 2 3; 4 5 6; 7 8 9])
A(:)

ans =

     1
     4
     7
     2
     5
     8
     3
     6
     9

#

A =([1 2 3; 4 5 6; 7 8 9])
A(3,:) = []

A =

     1     2     3
     4     5     6

#

A =([1 2 3; 4 5 6; 7 8 9])
A(3,:) = []
A = [A(1,:);A(2,:);[7 8 0]]

A =

     1     2     3
     4     5     6
     7     8     0

#

A =([1 2 3; 4 5 6; 7 8 9])
size(A)

ans =

     3     3

#

A =([1 2 3; 4 5 6; 7 8 9])
A'

ans =

     1     4     7
     2     5     8
     3     6     9

#

A =([1 2 3; 4 5 6; 7 8 9])
B  = [A 10*A; -A [1 0 0; 0 1 0; 0 0 1]]

B =

     1     2     3    10    20    30
     4     5     6    40    50    60
     7     8     9    70    80    90
    -1    -2    -3     1     0     0
    -4    -5    -6     0     1     0
    -7    -8    -9     0     0     1

#

b = ones(3,1)

b =

     1
     1
     1

#

eye(3)

ans =

     1     0     0
     0     1     0
     0     0     1
	 
#

c = zeros(2,3)

c =

     0     0     0
     0     0     0

#

C = [1 2; 3 4]
D = [C zeros(2); ones(2) eye(2)]

D =

     1     2     0     0
     3     4     0     0
     1     1     1     0
     1     1     0     1

#################
Exercises
#################

# 2

x = 0:0.005:10;
y1 = (1 / (0.5 * sqrt(2 * pi))) * exp((-1 / 2) * ((x - 5) / 0.5).^2);
y2 = (1 / (1.0 * sqrt(2 * pi))) * exp((-1 / 2) * ((x - 5) / 1.0).^2);
y3 = (1 / (1.5 * sqrt(2 * pi))) * exp((-1 / 2) * ((x - 5) / 1.5).^2);
plot(x,y1,'--c',x,y2,'-m',x,y3,'-.y')
xlabel('0 \leq x \leq 2\pi')
ylabel('Φ(x-5,σ)')
legend('σ = 0.5','σ = 1.0','σ = 1.5')
title('Problem 2')
axis([0, 10, 0, 1])

" This gives three Gaussin functions varying by standard deviations of the population. "

# 3

A = zeros(5, 5) 

n = 1
while n <= 5
    A(n, n) = 2
    n = n + 1
end
n = 1
while n <= 4
    A(n, n+1) = 1
    A(n+1, n) = 1
    n = n + 1
end

H = (1 / (2 * (1 / (5 - 1)).^2)) * A

[V, D] = eig(H)

B = V(5, :)
x = linspace(1/(5+1), 5/(5+1), 5);
y = sqrt(2) * sin(pi * x)
plot(x, B, x, y)
axis([0, 1, -2, 2])

" This is some evil code envisioned by Paul Rizzo. "

# 4

A = zeros(10, 10) 

n = 1
while n <= 10
    A(n, n) = 2
    n = n + 1
end
n = 1
while n <= 9
    A(n, n+1) = 1
    A(n+1, n) = 1
    n = n + 1
end

npoints = input('Enter npoints: ')
yeet = npoints + 10

H = (1 / (2 * (1 / (yeet - 1)).^2)) * A

[V, D] = eig(H)

B = V(5, :)
x = linspace(1/(yeet+1), yeet/(yeet+1), 10);
y = sqrt(2) * sin(pi * x)
plot(x, B, x, y)
axis([0, 1, -2, 2])

" I AM HACKER MAN "




